// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model PROJECT_OWNER {
  user_id             String             @id @default(uuid())
  username            String             @unique @db.VarChar(16)
  password            String             @db.VarChar(100)
  firstname           String             @db.VarChar(45)
  lastname            String             @db.VarChar(45)
  birthday            DateTime
  email               String             @db.VarChar(255)
  verify_email_status String             @default("in progress") @db.VarChar(20)
  house_no            String             @db.VarChar(10)
  province            String             @db.VarChar(45)
  district            String             @db.VarChar(45)
  subdistrict         String             @db.VarChar(45)
  postcode            String             @db.VarChar(5)
  VERIFICATION_INFO   VERIFICATION_INFO?
  PROJECT             PROJECT[]
  TRANSFER            TRANSFER[]
}

model VERIFICATION_INFO {
  citizen_id          String        @id @db.VarChar(13)
  laser_id            String        @db.VarChar(12)
  bank_name           String        @db.VarChar(45)
  account_number      String        @db.VarChar(20)
  acc_firstname       String        @db.VarChar(45)
  acc_lastname        String        @db.VarChar(45)
  book_bank_image_url String        @db.VarChar(2048)
  id_card_image_url   String        @db.VarChar(2048)
  status              String        @default("in progress") @db.VarChar(20)
  user_id             String        @unique
  project_owner       PROJECT_OWNER @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

}

model CATEGORY {
  category_id   Int          @id
  category_name String
  PROJECT       PROJECT[]
  INTERESTED    INTERESTED[]
}

model PROJECT {
  project_id         String           @id @default(uuid())
  category_id        Int
  category           CATEGORY         @relation(fields: [category_id], references: [category_id])
  project_title      String           @db.VarChar(200)
  objective          String           @db.VarChar(200)
  description        String           @db.Text
  video_url          String           @db.VarChar(2048)
  image_url          String           @db.VarChar(2048)
  start_date         DateTime         @default(now())
  due_date           DateTime
  crowd_funding_type String           @db.VarChar(10)
  funding_goal       Float
  status             String           @default("unpublished") @db.VarChar(20)
  donation_amount    Float            @default(0.00)
  user_id            String
  project_owner      PROJECT_OWNER    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  COMMENT            COMMENT[]
  TRANSACTION        TRANSACTION[]
  TRANSFER           TRANSFER[]
  Reward             REWARD[]
  PROJECT_UPDATE     PROJECT_UPDATE[]
}

model PROJECT_UPDATE {
  title       String   @db.VarChar(200)
  project_id  String
  date        DateTime @default(now())
  description String   @db.Text
  project     PROJECT  @relation(fields: [project_id], references: [project_id], onDelete: Cascade)

  @@id([title, project_id])
}

model PROJECT_SUPPORTER {
  user_id             String        @id @default(uuid())
  username            String        @unique @db.VarChar(16)
  password            String        @db.VarChar(100)
  firstname           String        @db.VarChar(45)
  lastname            String        @db.VarChar(45)
  birthday            DateTime
  email               String        @db.VarChar(255)
  verify_email_status String        @default("in progress") @db.VarChar(20)
  house_no            String        @db.VarChar(10)
  province            String        @db.VarChar(45)
  district            String        @db.VarChar(45)
  subdistrict         String        @db.VarChar(45)
  postcode            String        @db.VarChar(5)
  COMMENT             COMMENT[]
  INTERESTED          INTERESTED[]
  TRANSACTION         TRANSACTION[]
}

model COMMENT {
  title             String            @db.VarChar(200)
  date              DateTime          @default(now())
  message           String            @db.Text
  project_id        String
  user_id           String
  project           PROJECT           @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  project_supporter PROJECT_SUPPORTER @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([title, project_id, user_id])
}

model INTERESTED {
  user_id           String
  category_id       Int
  project_supporter PROJECT_SUPPORTER @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  CATEGORY          CATEGORY          @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  @@id([category_id, user_id])
}

model TRANSACTION {
  transaction_id    String            @id @default(uuid())
  donation_amount   Float
  status            String            @default("in progress") @db.VarChar(20)
  date              DateTime          @default(now())
  project           PROJECT           @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  project_supporter PROJECT_SUPPORTER @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project_id        String
  user_id           String
}

model REWARD {
  reward_name  String  @id
  level        String  @db.VarChar(1)
  description  String  @db.Text
  min_donation Float
  project_id   String
  project      PROJECT @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
}

model TRANSFER {
  transfer_id   String        @id @default(uuid())
  amount        Float
  status        String        @default("in progress") @db.VarChar(20)
  date          DateTime      @default(now())
  user_id       String
  project_id    String
  project_owner PROJECT_OWNER @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  project       PROJECT       @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
}
